AVL :  
 
#include <iostream> 
using namespace std; 
 
struct Node { 
    int key; 
    Node* left; 
    Node* right; 
    int height; 
}; 
 
int height(Node* node) { 
    if (node == nullptr) 
        return 0; 
    return node->height; 
} 
 
// Create a new node 
Node* newNode(int key) { 
    Node* node = new Node(); 
    node->key = key; 
    node->left = nullptr; 
    node->right = nullptr; 
    node->height = 1; // New node is initially added at leaf 
    return node; 
} 
 
// Get balance factor of node 
int getBalance(Node* node) { 
    if (node == nullptr) 
        return 0; 
    return height(node->left) - height(node->right); 
} 
 
// Right rotate 
Node* rightRotate(Node* y) { 
    Node* x = y->left; 
    Node* T2 = x->right; 
 
    // Rotation 
    x->right = y; 
    y->left = T2; 
 
    // Update heights 
    y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right)); 
    x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right)); 
 
    return x; 
} 
 
// Left rotate 
Node* leftRotate(Node* x) { 
    Node* y = x->right; 
    Node* T2 = y->left; 
 
    // Rotation 
    y->left = x; 
    x->right = T2; 
 
    // Update heights 
    x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right)); 
    y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right)); 
 
    return y; 
} 
 
// Insert a node 
Node* insert(Node* node, int key) { 
    // Normal BST insertion 
    if (node == nullptr) 
        return newNode(key); 
 
    if (key < node->key) 
        node->left = insert(node->left, key); 
    else if (key > node->key) 
        node->right = insert(node->right, key); 
    else // Duplicate keys not allowed 
        return node; 
 
    // Update height 
    node->height = 1 + (height(node->left) > height(node->right) ? height(node->left) : 
height(node->right)); 
 
    // Get balance factor 
    int balance = getBalance(node); 
 
    // Balance the node if needed 
 
    // Left Left Case 
    if (balance > 1 && key < node->left->key) 
        return rightRotate(node); 
 
    // Right Right Case 
    if (balance < -1 && key > node->right->key) 
        return leftRotate(node); 
 
    // Left Right Case 
    if (balance > 1 && key > node->left->key) { 
        node->left = leftRotate(node->left); 
        return rightRotate(node); 
    } 
 
    // Right Left Case 
    if (balance < -1 && key < node->right->key) { 
        node->right = rightRotate(node->right); 
        return leftRotate(node); 
    } 
 
    return node; 
} 
 
// Inorder traversal 
void inorder(Node* root) { 
    if (root != nullptr) { 
        inorder(root->left); 
        cout << root->key << " "; 
        inorder(root->right); 
    } 
} 
 
int main() { 
    Node* root = nullptr; 
    int n, key; 
 
    cout << "Enter number of nodes to insert: "; 
    cin >> n; 
 
    cout << "Enter the nodes: " << endl; 
    for (int i = 0; i < n; i++) { 
        cin >> key; 
        root = insert(root, key); 
} 
cout << "Inorder traversal of the constructed AVL tree is:" << endl; 
inorder(root); 
cout << endl; 
return 0;
}

// In AVL trees, the time complexity for insertion, deletion, and search operations is O(log n)
