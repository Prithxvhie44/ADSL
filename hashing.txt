#include <iostream> 
#include <string> 
 
using namespace std; 
 
 
struct HashNode { 
    int data; 
    HashNode* next; 
    HashNode(int d) : data(d), next(nullptr) {} 
}; 
 
 
class Hash_table_chaining { 
private: 
    HashNode* table[10]; 
 
    int hashFunction(int key) { 
        return key % 10; 
    } 
 
public: 
    Hash_table_chaining() { 
        for (int i = 0; i < 10; i++) { 
            table[i] = nullptr; 
        } 
    } 
 
    void insert(int value) { 
        int index = hashFunction(value); 
        HashNode* newNode = new HashNode(value); 
 
        if (table[index] == nullptr) { 
            table[index] = newNode; 
        } else { 
            HashNode* temp = table[index]; 
            while (temp->next) { 
                temp = temp->next; 
            } 
            temp->next = newNode; 
        } 
        cout<<value<<" inserted using Chaining."<<endl; 
    } 
 
    void search(int value) { 
        int index = hashFunction(value); 
        HashNode* temp = table[index]; 
 
        while (temp != nullptr) { 
            if (temp->data == value) { 
                cout<<value<<" found in Hash Table (Chaining)."<<endl; 
                return; 
            } 
            temp = temp->next; 
        } 
        cout<<value<<" not found in Hash Table (Chaining)."<<endl; 
    } 
 
    void remove(int value) { 
        int index = hashFunction(value); 
        HashNode* temp = table[index]; 
        HashNode* prev = nullptr; 
 
        while (temp) { 
            if (temp->data == value) { 
                if (prev) { 
                    prev->next = temp->next; 
                } else { 
                    table[index] = temp->next; 
                } 
                delete temp; 
                cout<<value<<" deleted from Hash Table (Chaining)."<<endl; 
                return; 
            } 
            prev = temp; 
            temp = temp->next; 
        } 
        cout<<value<<" not found in Hash Table (Chaining)."<<endl; 
    } 
 
    void display() { 
        cout<<"\nHash Table (Chaining):\n"; 
        for (int i = 0; i < 10; i++) { 
            cout<<i<<": "; 
            HashNode* temp = table[i]; 
            while (temp) { 
                cout<<temp->data<<" -> "; 
                temp = temp->next; 
            } 
            cout<<"NULL\n"; 
        } 
    } 
}; 
 
class Hash_table_linear { 
private: 
    int table[10]; 
    bool isOccupied[10]; 
 
    int hashFunction(int key) { 
        return key % 10; 
    } 
 
public: 
    Hash_table_linear() { 
        for (int i = 0; i < 10; i++) { 
            table[i] = -1; 
            isOccupied[i] = false; 
        } 
    } 
 
    void insert(int value) { 
        int index = hashFunction(value); 
        int startIndex = index; 
        int i = 0; 
 
        while (isOccupied[index]) { 
            index = (startIndex + ++i) % 10; 
            if (i == 10) { 
                cout<<"Hash Table is full. Cannot insert "<<value<<".\n"; 
                return; 
            } 
        } 
 
        table[index] = value; 
        isOccupied[index] = true; 
        cout<<value<<" inserted using Linear Probing.\n"; 
    } 
 
    void search(int value) { 
        int index = hashFunction(value); 
        int startIndex = index; 
        int i = 0; 
 
        while (isOccupied[index]) { 
            if (table[index] == value) { 
                cout<<value<<" found in Hash Table (Linear Probing).\n"; 
                return; 
            } 
            index = (startIndex + ++i) % 10; 
            if (i == 10) { 
                break; 
            } 
        } 
        cout<<value<<" not found in Hash Table (Linear Probing).\n"; 
    } 
 
    void remove(int value) { 
        int index = hashFunction(value); 
        int startIndex = index; 
        int i = 0; 
 
        while (isOccupied[index]) { 
            if (table[index] == value) { 
                table[index] = -1; 
                isOccupied[index] = false; 
                cout<<value<<" deleted from Hash Table (Linear Probing).\n"; 
                return; 
            } 
            index = (startIndex + ++i) % 10; 
            if (i == 10) { 
                break; 
            } 
        } 
        cout<<value<<" not found in Hash Table (Linear Probing).\n"; 
    } 
 
    void display() { 
        cout<<"\nHash Table (Linear Probing):\n"; 
        for (int i = 0; i < 10; i++) { 
            if (isOccupied[i]) { 
                cout<<"Index "<<i<<": "<<table[i]<<"\n"; 
            } else { 
                cout<<"Index "<<i<<": Empty\n"; 
            } 
        } 
    } 
}; 
 
// 
//struct node{ 
//    int data; 
//    int chain; 
//}; 
// 
//class Hash_table_Chain{ 
//    private: 
//        node *hash_table[10]; 
//         
//    int hashFunction(int key) { 
//        return key % 10; 
//    } 
//     
//    public: 
//        Hash_table_Chain(){ 
//            for(int i=0;i<10;i++){ 
//                node hash_table[i] = -1; 
//                hash_table[i].chain = -1; 
//            } 
//        } 
//}; 
 
int main() { 
    int choice, value, method; 
 
    cout<<"Choose Hash Table Storage Method:\n"; 
    cout<<"1) Linear Probing\n"; 
    cout<<"2) Chaining (Linked List)\n"; 
    cout<<"Enter choice: "; 
    cin >> method; 
 
    if (method != 1 && method != 2) { 
        cout<<"Invalid choice. Exiting program.\n"; 
        return 0; 
    } 
 
    Hash_table_linear htLinear; 
    Hash_table_chaining htChaining; 
 
    do { 
        cout<<"\n--- Hash Table Menu ---"; 
        cout<<"\n1. Insert a number"; 
        cout<<"\n2. Search a number"; 
        cout<<"\n3. Delete a number"; 
        cout<<"\n4. Display"; 
        cout<<"\n5. Exit"; 
        cout<<"\nEnter your choice: "; 
        cin >> choice; 
 
        switch (choice) { 
            case 1: 
                cout<<"Enter the number to insert: "; 
                cin >> value; 
                if (method == 1) htLinear.insert(value); 
                else htChaining.insert(value); 
                break; 
            case 2: 
                cout<<"Enter the number to search: "; 
                cin >> value; 
                if (method == 1) htLinear.search(value); 
                else htChaining.search(value); 
                break; 
            case 3: 
                cout<<"Enter the number to delete: "; 
                cin >> value; 
                if (method == 1) htLinear.remove(value); 
                else htChaining.remove(value); 
                break; 
            case 4: 
                if (method == 1) htLinear.display(); 
                else htChaining.display(); 
                break; 
            case 5: 
                cout<<"Exiting program.\n"; 
                break; 
            default: 
                cout<<"Invalid choice. Please try again.\n"; 
        } 
    } while (choice != 5); 
 
    return 0; 
} 
